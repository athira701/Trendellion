<%- include('../partials/admin/header1') %>  
<style>
/* Form Container */
.container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 2rem;
    background: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
}

/* Form Elements */
.form-control, .form-select {
    height: 48px;
    padding: 0.75rem 1rem;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    transition: all 0.3s ease;
    background-color: #f8f9fa;
}

.form-control:focus, .form-select:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    background-color: #ffffff;
}

/* Validation States */
.form-control.is-invalid, .form-select.is-invalid {
    border-color: #dc3545;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.form-control.is-valid, .form-select.is-valid {
    border-color: #28a745;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='M2.3 6.73L.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.invalid-feedback {
    display: none;
    color: #dc3545;
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.was-validated .form-control:invalid ~ .invalid-feedback,
.was-validated .form-select:invalid ~ .invalid-feedback,
.form-control.is-invalid ~ .invalid-feedback,
.form-select.is-invalid ~ .invalid-feedback {
    display: block;
}

/* Labels */
.form-label {
    font-weight: 500;
    color: #495057;
    margin-bottom: 0.5rem;
}

/* Submit Button */
.btn-primary {
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    background: linear-gradient(45deg, #007bff, #0056b3);
    border: none;
    border-radius: 6px;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
}

/* SweetAlert Customization */
.custom-swal {
    font-family: inherit;
}

.custom-swal .swal2-title {
    font-size: 1.5rem;
    color: #2c3e50;
}

.custom-swal .swal2-content {
    font-size: 1rem;
    color: #34495e;
}

.custom-swal .swal2-confirm {
    background: linear-gradient(45deg, #007bff, #0056b3) !important;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    .container {
        padding: 1rem;
    }
    
    .btn-primary {
        width: 100%;
    }
}
</style>
<h1>Add Offer</h1>
<% if (typeof errorMessage !== 'undefined' && errorMessage) { %>
    <div class="alert alert-danger" role="alert">
        <%= errorMessage %>
    </div>
<% } %>
<div class="container">   
    <form id="addOfferForm" action="addoffer" method="POST">
        <div class="row">
            <div class="mb-3">
                <label for="offerName" class="form-label">Offer Name</label>
                <input type="text" class="form-control" id="offerName" name="offerName" required>
                <div class="invalid-feedback"></div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="discount" class="form-label">Discount (0-100%)</label>
                    <input type="number" class="form-control" id="discount" name="discount" required min="0" max="100">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="maxRedemptions" class="form-label">Max Redemptions (Optional)</label>
                    <input type="number" class="form-control" id="maxRedemptions" name="maxRedemptions" min="1">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" id="startDate" name="startDate" required>
                    <div class="invalid-feedback"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="endDate" name="endDate" required>
                    <div class="invalid-feedback"></div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="offerType" class="form-label">Offer Type</label>
                    <select class="form-select" id="offerType" name="offerType" required>
                        <option value="">Select offer type</option>
                        <option value="product">Product</option>
                        <option value="category">Category</option>
                        <option value="referral">Referral</option>
                    </select>
                    <div class="invalid-feedback"></div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3" id="productSelect" style="display:none;">
                    <label for="productId" class="form-label">Product</label>
                    <select class="form-select" id="productId" name="productId">
                        <option value="">Select a product</option>
                        <% products.forEach((item) => { %>
                            <option value="<%=item._id%>"><%= item.productName %></option>
                        <% }); %>
                    </select>
                    <div class="invalid-feedback"></div>
                </div>
                <div class="mb-3" id="categorySelect" style="display:none;">
                    <label for="categoryId" class="form-label">Category</label>
                    <select class="form-select" id="categoryId" name="categoryId">
                        <option value="">Select a category</option>
                        <% categories.forEach((item) => { %>
                            <option value="<%=item._id%>"><%= item.name %></option>
                        <% }); %>
                    </select>
                    <div class="invalid-feedback"></div>
                </div>
                <div class="mb-3" id="referralCodeInput" style="display:none;">
                    <label for="referralCode" class="form-label">Referral Code</label>
                    <input type="text" class="form-control" id="referralCode" name="referralCode">
                    <div class="invalid-feedback"></div>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Add Offer</button>
    </form>
</div>

<!-- Include SweetAlert Library -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
// Utility functions
const isValidDate = (date) => {
    const selectedDate = new Date(date);
    return !isNaN(selectedDate.getTime());
};

document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('addOfferForm');
    const offerTypeSelect = document.getElementById('offerType');
    const productSelect = document.getElementById('productSelect');
    const categorySelect = document.getElementById('categorySelect');
    const referralCodeInput = document.getElementById('referralCodeInput');
    
    // Initialize form elements
    const inputs = {
        offerName: document.getElementById('offerName'),
        discount: document.getElementById('discount'),
        startDate: document.getElementById('startDate'),
        endDate: document.getElementById('endDate'),
        offerType: document.getElementById('offerType'),
        productId: document.getElementById('productId'),
        categoryId: document.getElementById('categoryId'),
        referralCode: document.getElementById('referralCode'),
        maxRedemptions: document.getElementById('maxRedemptions')
    };

    // Add input constraints
    inputs.offerName.addEventListener('input', function(e) {
        validateField('offerName');
    });

    inputs.discount.addEventListener('input', function(e) {
        validateField('discount');
    });

    inputs.maxRedemptions.addEventListener('input', function(e) {
        validateField('maxRedemptions');
    });

    // Dynamic min dates for date inputs
    const today = new Date().toISOString().split('T')[0];
    inputs.startDate.setAttribute('min', today);
    inputs.endDate.setAttribute('min', today);
    
    inputs.startDate.addEventListener('change', function() {
        validateField('startDate');
        // Update min date for end date based on start date
        if (this.value) {
            inputs.endDate.setAttribute('min', this.value);
            validateField('endDate');
        }
    });
    
    inputs.endDate.addEventListener('change', function() {
        validateField('endDate');
    });

    // Validation rules
    const validationRules = {
        offerName: {
            validate: (value) => {
                if (!value.trim()) return 'Offer name is required';
                if (value.length < 3) return 'Offer name must be at least 3 characters';
                if (value.length > 50) return 'Offer name cannot exceed 50 characters';
                return '';
            }
        },
        discount: {
            validate: (value) => {
                const discount = parseFloat(value);
                if (!value) return 'Discount is required';
                if (isNaN(discount)) return 'Discount must be a number';
                if (discount < 0) return 'Discount must be at least 0';
                if (discount > 100) return 'Discount cannot exceed 100%';
                return '';
            }
        },
        maxRedemptions: {
            validate: (value) => {
                if (!value) return ''; // Optional field
                const maxRedemptions = parseInt(value);
                if (isNaN(maxRedemptions)) return 'Max redemptions must be a number';
                if (maxRedemptions < 1) return 'Max redemptions must be at least 1';
                return '';
            }
        },
        startDate: {
            validate: (value) => {
                if (!value) return 'Start date is required';
                if (!isValidDate(value)) return 'Invalid date format';
                const startDate = new Date(value);
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                if (startDate < today) return 'Start date cannot be in the past';
                return '';
            }
        },
        endDate: {
            validate: (value, formData) => {
                if (!value) return 'End date is required';
                if (!isValidDate(value)) return 'Invalid date format';
                if (!formData.startDate || !isValidDate(formData.startDate)) return 'Please select a valid start date first';
                
                const endDate = new Date(value);
                const startDate = new Date(formData.startDate);
                if (endDate <= startDate) return 'End date must be after start date';
                return '';
            }
        },
        offerType: {
            validate: (value) => {
                if (!value) return 'Offer type is required';
                if (!['product', 'category', 'referral'].includes(value)) return 'Invalid offer type';
                return '';
            }
        },
        productId: {
            validate: (value, formData) => {
                if (formData.offerType === 'product' && (!value || value.trim() === '')) {
                    return 'Product is required for product-type offers';
                }
                return '';
            }
        },
        categoryId: {
            validate: (value, formData) => {
                if (formData.offerType === 'category' && (!value || value.trim() === '')) {
                    return 'Category is required for category-type offers';
                }
                return '';
            }
        },
        referralCode: {
            validate: (value, formData) => {
                if (formData.offerType === 'referral') {
                    if (!value || value.trim() === '') return 'Referral code is required for referral-type offers';
                    if (value.length < 3) return 'Referral code must be at least 3 characters';
                    if (value.length > 20) return 'Referral code cannot exceed 20 characters';
                    if (!/^[A-Za-z0-9]+$/.test(value)) return 'Referral code can only contain letters and numbers';
                }
                return '';
            }
        }
    };

    // Field validation function
    function validateField(fieldName) {
        const input = inputs[fieldName];
        if (!input) return true; // Skip if field doesn't exist
        
        const errorDiv = input.nextElementSibling;
        if (!errorDiv || !errorDiv.classList.contains('invalid-feedback')) return true;
        
        const formData = Object.fromEntries(new FormData(form));
        const error = validationRules[fieldName]?.validate(input.value, formData) || '';

        input.classList.remove('is-valid', 'is-invalid');
        if (error) {
            input.classList.add('is-invalid');
            errorDiv.textContent = error;
            return false;
        } else {
            input.classList.add('is-valid');
            errorDiv.textContent = '';
            return true;
        }
    }

    // Offer type change handler
    offerTypeSelect.addEventListener('change', function() {
        const selectedType = this.value;
        
        // Reset and hide all option selects/inputs
        productSelect.style.display = 'none';
        categorySelect.style.display = 'none';
        referralCodeInput.style.display = 'none';
        
        inputs.productId.required = false;
        inputs.categoryId.required = false;
        inputs.referralCode.required = false;

        // Show relevant select based on type
        if (selectedType === 'product') {
            productSelect.style.display = 'block';
            inputs.productId.required = true;
        } else if (selectedType === 'category') {
            categorySelect.style.display = 'block';
            inputs.categoryId.required = true;
        } else if (selectedType === 'referral') {
            referralCodeInput.style.display = 'block';
            inputs.referralCode.required = true;
        }
        
        // Validate the type-specific field
        validateField('productId');
        validateField('categoryId');
        validateField('referralCode');
    });

    // Form submission handler
    form.addEventListener('submit', async function(e) {
        e.preventDefault();

        // Validate all fields
        let isValid = true;
        
        // Always validate these fields
        ['offerName', 'discount', 'startDate', 'endDate', 'offerType', 'maxRedemptions'].forEach(field => {
            if (!validateField(field)) isValid = false;
        });
        
        // Validate type-specific fields
        const offerType = offerTypeSelect.value;
        if (offerType === 'product') {
            if (!validateField('productId')) isValid = false;
        } else if (offerType === 'category') {
            if (!validateField('categoryId')) isValid = false;
        } else if (offerType === 'referral') {
            if (!validateField('referralCode')) isValid = false;
        }

        if (!isValid) {
            Swal.fire({
                icon: 'error',
                title: 'Validation Error',
                text: 'Please check all fields and try again',
                confirmButtonText: 'OK',
                customClass: {
                    container: 'custom-swal'
                }
            });
            return;
        }

        // Prepare form data
        const formData = new FormData(this);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/admin/addoffer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.message || 'Failed to add offer');
            }

            await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Offer added successfully',
                timer: 2000,
                showConfirmButton: false
            });

            window.location.href = '/admin/offers';
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message,
                confirmButtonText: 'OK'
            });
        }
    });
});
</script>

<br><br><br>