<%- include('../partials/admin/header1') %>
<h1>Edit Offer !!!</h1>

<div class="container">   
    <form id="editOfferForm" action="/admin/editOffer" method="POST">
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="offerName" class="form-label">Offer Name</label>
                    <input type="text" class="form-control" name="offerName" value="<%=offer.offerName%>" required>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="discount" class="form-label">Discount</label>
                    <input type="number" class="form-control" name="discount" value="<%=offer.discount%>" required min="1">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="startDate" class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="startDate" value="<%=offer.startDate.toISOString().split('T')[0]%>" required>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="endDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" name="endDate" value="<%=offer.endDate.toISOString().split('T')[0]%>" required>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="offerType" class="form-label">Offer Type</label>
                    <select class="form-select" name="offerType" id="offerType" required>
                        <option value="category" <%= offer.offerType === 'category' ? 'selected' : '' %>>Category</option>
                        <option value="product" <%= offer.offerType === 'product' ? 'selected' : '' %>>Product</option>
                        <option value="referral" <%= offer.offerType === 'referral' ? 'selected' : '' %>>Referral</option>
                    </select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="mb-3" id="productSelect">
                    <label for="productId" class="form-label">Product</label>
                    <select class="form-select" name="productId">
                        <% products.forEach((item) => { %>
                            <option value="<%=item._id%>" <%= offer.productId && offer.productId.toString() === item._id.toString() ? 'selected' : '' %>><%= item.productName %></option>
                        <% }); %>
                    </select>
                </div>
                <div class="mb-3" id="categorySelect" style="display:none;">
                    <label for="categoryId" class="form-label">Category</label>
                    <select class="form-select" name="categoryId">
                        <% categories.forEach((item) => { %>
                            <option value="<%=item._id%>" <%= offer.categoryId && offer.categoryId.toString() === item._id.toString() ? 'selected' : '' %>><%= item.name %></option>
                        <% }); %>
                    </select>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Edit Offer</button>
        <input type="hidden" name="id" value="<%=offer._id %>">
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const offerTypeSelect = document.getElementById('offerType');
        const productSelect = document.getElementById('productSelect');
        const categorySelect = document.getElementById('categorySelect');
        const editOfferForm = document.getElementById('editOfferForm');

        function toggleSelects() {
            const selectedOfferType = offerTypeSelect.value;
            if (selectedOfferType === 'product') {
                productSelect.style.display = 'block';
                categorySelect.style.display = 'none';
            } else if (selectedOfferType === 'category') {
                productSelect.style.display = 'none';
                categorySelect.style.display = 'block';
            } else {
                productSelect.style.display = 'none';
                categorySelect.style.display = 'none';
            }
        }

        // Initial call to toggleSelects
        toggleSelects();

        // Event listener for offerType select change
        offerTypeSelect.addEventListener('change', toggleSelects);

        // Front-end validation and form submission
        editOfferForm.addEventListener('submit', function (e) {
            e.preventDefault();
            
            // Validation
            const offerName = document.querySelector('[name="offerName"]').value.trim();
            const discount = parseFloat(document.querySelector('[name="discount"]').value);
            const startDate = new Date(document.querySelector('[name="startDate"]').value);
            const endDate = new Date(document.querySelector('[name="endDate"]').value);
            const now = new Date();

            if (offerName.length < 3) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Offer Name',
                    text: 'Offer name must be at least 3 characters long.',
                });
                return;
            }

            if (isNaN(discount) || discount <= 0) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Discount',
                    text: 'Discount must be a positive number.',
                });
                return;
            }

            if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Dates',
                    text: 'Please provide valid start and end dates.',
                });
                return;
            }

            if (startDate < now) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Start Date',
                    text: 'Start date cannot be in the past.',
                });
                return;
            }

            if (startDate >= endDate) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Date Range',
                    text: 'Start date must be before end date.',
                });
                return;
            }

            if (offerTypeSelect.value === 'product' && !document.querySelector('[name="productId"]').value) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Selection',
                    text: 'Please select a product for Product offers.',
                });
                return;
            }

            if (offerTypeSelect.value === 'category' && !document.querySelector('[name="categoryId"]').value) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Selection',
                    text: 'Please select a category for Category offers.',
                });
                return;
            }

            // Form submission using fetch
            const formData = new FormData(editOfferForm);
            const formDataObj = Object.fromEntries(formData.entries());
            
            fetch('/admin/editOfferr', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formDataObj),
                redirect: 'follow'
            })
            .then(response => {
                // Check if redirect is happening
                if (response.redirected) {
                    // Show success message before redirecting
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Offer edited successfully',
                    }).then(() => {
                        window.location.href = response.url;
                    });
                    return null; // Skip JSON parsing
                } else {
                    // If no redirect, parse the JSON response
                    return response.json();
                }
            })
            .then(data => {
                if (data) { // If there's data (no redirect occurred)
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Offer edited successfully',
                        }).then(() => {
                            window.location.href = '/admin/offers';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.errorMessage || 'Something went wrong',
                        });
                    }
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred',
                });
            });
        });
    });
</script>

<br><br><br>