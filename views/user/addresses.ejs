<%-include('../../views/partials/user/header')%>

<!-- views/dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>User Dashboard</title>
    <style>
      /* Keeping all existing styles */
      :root {
        --primary-pink: #de3e7e;
        --text-gray: #666;
        --border-color: #eee;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
      }

      /* Previous styles remain exactly the same until main-content */
      body {
        background-color: #f5f5f5;
      }

      .container {
        display: flex;
        min-height: 100vh;
        padding: 20px;
        gap: 20px;
      }

      .sidebar {
        background: rgb(248, 209, 235);
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 250px;
        height: fit-content;
      }

      .profile-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-bottom: 20px;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 20px;
      }

      .profile-image {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background-color: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 10px;
      }

      .profile-name {
        color: var(--text-gray);
        font-size: 16px;
        margin-bottom: 20px;
      }

      .menu-item {
        display: flex;
        align-items: center;
        margin-left: 20px;
        padding: 12px 0;
        color: var(--text-gray);
        text-decoration: none;
        cursor: pointer;
      }

      .menu-item:hover {
        color: var(--primary-pink);
      }

      .menu-item i {
        margin-right: 10px;
        width: 20px;
      }

      .menu-item.active {
        color: var(--primary-pink);
        font-weight: bold;
        border-left: 3px solid var(--primary-pink);
        padding-left: 10px;
      }

      .edit-profile-btn {
        background-color: var(--primary-pink);
        color: white;
        border: none;
        padding: 12px;
        width: 100%;
        border-radius: 4px;
        cursor: pointer;
        margin: 10px 0;
      }

      /* Updated main-content styles */
      .main-content {
        flex: 1;
        background: white;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .content-header {
        font-size: 24px;
        color: #333;
        margin-bottom: 30px;
      }

      /* New styles for address management */
      .address-list {
        margin-bottom: 30px;
      }

      .address-card {
        background: #fff;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .address-title {
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
      }

      .address-info {
        color: var(--text-gray);
        margin-bottom: 5px;
      }

      .form-row {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
      }

      .form-group {
        flex: 1;
        margin-bottom: 20px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        color: var(--text-gray);
        font-weight: 500;
      }

      .form-group input {
        width: 100%;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: #f5f5f5;
      }

      .submit-btn {
        background-color: var(--primary-pink);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: 500;
        width: auto;
      }

      @media (max-width: 768px) {
        .container {
          flex-direction: column;
        }

        .sidebar {
          width: 100%;
        }

        .form-row {
          flex-direction: column;
          gap: 0;
        }
      }
    </style>
  </head>
  <body>
    <div class="container">
      <!-- Sidebar remains exactly the same -->
      <div class="sidebar">
        <h1
          style="
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
          "
        >
          <b>User Dashboard</b>
        </h1>
        <div class="profile-section">
          <div class="profile-image">
            <i class="fas fa-user"></i>
          </div>
          <div class="profile-name">
            <a href="#" class="sign-in-link" style="text-decoration: none"
              ><%=locals.user.name%></a
            >
          </div>
        </div>

        <!-- Menu Items -->
        <a href="/profile" class="menu-item">
          <i class="fas fa-map-marker-alt"></i>
          Profile
        </a>
        <a href="/addresses" class="menu-item active">
          <i class="fas fa-map-marker-alt"></i>
          Manage Address
        </a>
        <a href="/orders" class="menu-item">
          <i class="fas fa-shopping-bag"></i>
          My Orders
        </a>
        <a href="/cart" class="menu-item">
          <i class="fas fa-shopping-cart"></i>
          Manage Cart
        </a>
        <a class="menu-item">
          <i class="fas fa-wallet"></i>
          Wallets
        </a>
        <a href="/logout" class="menu-item">
          <i class="fas fa-sign-out-alt"></i>
          Log Out
        </a>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <h2 class="content-header">Manage Address</h2>

        <!-- Address Form -->
        <form
          class="mt-6"
          id="addAddressForm"
          action="/addAddress"
          method="POST"
        >
          <div class="form-row">
            <div class="form-group">
              <label>Full Name</label>
              <input
                type="text"
                id="name"
                name="name"
                placeholder="Enter name"
              />
              <span id="NameError" class="text-red-500 text-sm"></span>
            </div>
          </div>
          <div class="form-group">
            <label>Address Type</label>
            <input type="text" placeholder="Enter full address" />
            <select
              id="type"
              name="addressType"
              class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
            >
              <option value="Home">Home</option>
              <option value="Work">Work</option>
            </select>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label>City</label>
              <input
                type="text"
                id="city"
                name="city"
                placeholder="Enter city"
              />
              <span id="CityError" class="text-red-500 text-sm"></span>
            </div>
            <div class="form-group">
              <label>State</label>
              <input
                type="text"
                id="state"
                name="state"
                placeholder="Enter state"
              />
              <span id="StateError" class="text-red-500 text-sm"></span>
            </div>
            <div class="form-group">
              <label>Pin Code</label>
              <input
                type="text"
                id="pincode"
                name="pincode"
                placeholder="Enter pin code"
              />
              <span id="PincodeError" class="text-red-500 text-sm"></span>
            </div>
          </div>
           <div class="form-group">
              <label>Land Mark</label>
              <input
                type="text"
                id="landmark"
                name="landMark"
                placeholder="Enter landmark"
              />
              <span id="LandMarkError" class="text-red-500 text-sm"></span>
            </div>
          <div class="form-row">
            <div class="form-group">
              <label>Phone Number</label>
              <input type="tel" placeholder="Enter phone number" name="phone" />
              <span id="PhoneError" class="text-red-500 text-sm"></span>
            </div>
            <div class="form-group">
              <label>Alternate Phone Number</label>
              <input
                type="tel"
                placeholder="Enter phone number"
                name="altPhone"
              />
              <span id="AltPhoneError" class="text-red-500 text-sm"></span>
            </div>
          </div>

          <button type="submit" class="submit-btn">Add Address</button>
        </form>
      </div>

      <!-- MY ADDRESSES Section -->
<div class="fashion-card rounded-xl p-8">
    <h2 class="text-3xl font-light tracking-wide mb-8">MY ADDRESSES</h2>
    
    <!-- Address Cards Container with vertical alignment -->
    <div class="flex flex-col space-y-4 max-w-3xl">
        <% addresses.forEach(function(userAddress) { %>
            <% userAddress.address.forEach(function(address) { %>
                <div class="border p-4 rounded-lg bg-pink-200 w-full">
                  <input 
                  type="radio" 
                  name="defaultAddress" 
                  value="<%= address._id %>"
                  <%= address.isDefault ? 'checked' : '' %>
                  onchange="setDefaultAddress('<%= address._id %>')"
                  class="form-radio h-4 w-4 text-pink-600"
              >
                    <h3 class="inline-block bg-gray-100 text-gray-700 px-3 py-0.5 text-sm rounded mb-2">
                        <%= address.addressType || 'Default Type' %>
                    </h3>
                    <h2 class="font-semibold">Name:<%= address.name || 'Name not provided' %></h2>
                    <p class="text-gray-600">City:<%= address.city || 'City not provided' %>,State: <%= address.state || 'State not provided' %>,PIN: <%= address.pincode || 'pin not provided' %></p>
                    <p class="text-gray-600">Phone:<%= address.phone %></p>
                    <div class="mt-2">
                        <button class="text-blue-500 hover:text-blue-700 mr-4" onclick="editAddress('<%= address._id %>')">Edit</button>
                        <button class="text-red-500 hover:text-red-700" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                    </div>
                    <!-- <div class="mt-2">
                        <% if (address.isDefault) { %>
                            <span class="text-green-500 font-semibold">Default Address</span>
                        <% } else { %>
                            <button class="text-blue-500 hover:underline" onclick="setDefaultAddress('<%= address._id %>')">Set as Default</button>
                        <% } %>
                    </div> -->
                </div>
            <% }); %>
        <% }); %>
    </div>
</div>
    </div>
   
    
    <!-- EditAddressModal -->
    <%- include("../partials/editAddressModal") %>

  

    
  </body>
</html>


<%-include('../../views/partials/user/footer')%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.querySelectorAll(".menu-item").forEach((item) => {
    item.addEventListener("click", function () {
      document.querySelector(".menu-item.active")?.classList.remove("active");
      this.classList.add("active");
    });
  });

  // Function to open the edit modal and populate it with address data
  
// Utility functions for validation
const validationRules = {
    validateName: (name) => {
        if (!name || name.trim().length < 2) {
            return 'Name should be at least 2 characters long';
        }
        if (!/^[a-zA-Z\s]{2,50}$/.test(name.trim())) {
            return 'Name should contain only letters and spaces (2-50 characters)';
        }
        return null;
    },

    validatePhone: (phone) => {
        if (!phone || !/^[6-9]\d{9}$/.test(phone)) {
            return 'Please enter a valid 10-digit phone number';
        }
        return null;
    },

    validateAltPhone: (altPhone) => {
        if (altPhone && !/^[6-9]\d{9}$/.test(altPhone)) {
            return 'Please enter a valid alternate phone number';
        }
        return null;
    },

    validatePincode: (pincode) => {
        if (!pincode || !/^\d{6}$/.test(pincode)) {
            return 'Please enter a valid 6-digit pincode';
        }
        return null;
    },

    validateCity: (city) => {
        if (!city || city.trim().length < 2) {
            return 'City name should be at least 2 characters long';
        }
        if (!/^[a-zA-Z\s]{2,50}$/.test(city.trim())) {
            return 'City should contain only letters and spaces';
        }
        return null;
    },

    validateState: (state) => {
        if (!state || state.trim().length < 2) {
            return 'State name should be at least 2 characters long';
        }
        if (!/^[a-zA-Z\s]{2,50}$/.test(state.trim())) {
            return 'State should contain only letters and spaces';
        }
        return null;
    },

    validateAddressType: (addressType) => {
        if (!addressType || !['home', 'work', 'other'].includes(addressType.toLowerCase())) {
            return 'Please select a valid address type';
        }
        return null;
    },

    validateLandmark: (landmark) => {
        if (landmark && (landmark.trim().length < 3 || landmark.trim().length > 100)) {
            return 'Landmark should be between 3 and 100 characters';
        }
        return null;
    }
};

// Add Address Form Handling
document.getElementById('addAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const formData = new FormData(this);
    const formDataObject = Object.fromEntries(formData);

    // Validate all fields
    const errors = [];
    const validations = [
        { field: 'name', value: formDataObject.name, validator: validationRules.validateName },
        { field: 'phone', value: formDataObject.phone, validator: validationRules.validatePhone },
        { field: 'altPhone', value: formDataObject.altPhone, validator: validationRules.validateAltPhone },
        { field: 'pincode', value: formDataObject.pincode, validator: validationRules.validatePincode },
        { field: 'city', value: formDataObject.city, validator: validationRules.validateCity },
        { field: 'state', value: formDataObject.state, validator: validationRules.validateState },
        { field: 'addressType', value: formDataObject.addressType, validator: validationRules.validateAddressType },
        { field: 'landMark', value: formDataObject.landMark, validator: validationRules.validateLandmark }
    ];

    validations.forEach(({ field, value, validator }) => {
        const error = validator(value);
        if (error) errors.push(error);
    });

    if (errors.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            html: errors.join('<br>'),
            confirmButtonColor: '#3085d6'
        });
        return;
    }

    // Show loading state
    Swal.fire({
        title: 'Adding Address...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    fetch('/addAddress', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formDataObject),
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error,
                confirmButtonColor: '#3085d6'
            });
        } else {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address added successfully',
                confirmButtonColor: '#3085d6'
            }).then(() => {
                window.location.href = '/addresses';
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while adding the address',
            confirmButtonColor: '#3085d6'
        });
    });
});

// Edit Address Functions
function editAddress(addressId) {
    Swal.fire({
        title: 'Loading address details...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    fetch(`/address/${addressId}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                throw new Error(data.error);
            }
            
            // Populate the modal fields
            document.getElementById('editAddressId').value = data._id;
            document.getElementById('editAddressName').value = data.name;
            document.getElementById('editAddressType').value = data.addressType;
            document.getElementById('editAddressLandMark').value = data.landMark || '';
            document.getElementById('editAddressCity').value = data.city;
            document.getElementById('editAddressState').value = data.state;
            document.getElementById('editAddressPincode').value = data.pincode;
            document.getElementById('editAddressPhone').value = data.phone;
            document.getElementById('editAddressAltPhone').value = data.altPhone || '';

            Swal.close();
            document.getElementById('editAddressModal').style.display = 'flex';
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Error fetching address details',
                confirmButtonColor: '#3085d6'
            });
        });
}

// Edit Address Form Handling
document.getElementById('editAddressForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const addressId = document.getElementById('editAddressId').value;
    const formData = new FormData(this);
    const formDataObject = Object.fromEntries(formData);

    // Validate all fields
    const errors = [];
    const validations = [
        { field: 'name', value: formDataObject.name, validator: validationRules.validateName },
        { field: 'phone', value: formDataObject.phone, validator: validationRules.validatePhone },
        { field: 'altPhone', value: formDataObject.altPhone, validator: validationRules.validateAltPhone },
        { field: 'pincode', value: formDataObject.pincode, validator: validationRules.validatePincode },
        { field: 'city', value: formDataObject.city, validator: validationRules.validateCity },
        { field: 'state', value: formDataObject.state, validator: validationRules.validateState },
        { field: 'addressType', value: formDataObject.addressType, validator: validationRules.validateAddressType },
        { field: 'landMark', value: formDataObject.landMark, validator: validationRules.validateLandmark }
    ];

    validations.forEach(({ field, value, validator }) => {
        const error = validator(value);
        if (error) errors.push(error);
    });

    if (errors.length > 0) {
        Swal.fire({
            icon: 'error',
            title: 'Validation Error',
            html: errors.join('<br>'),
            confirmButtonColor: '#3085d6'
        });
        return;
    }

    // Show loading state
    Swal.fire({
        title: 'Updating Address...',
        allowOutsideClick: false,
        didOpen: () => {
            Swal.showLoading();
        }
    });

    fetch(`/address/${addressId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(formDataObject),
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.error,
                confirmButtonColor: '#3085d6'
            });
        } else {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Address updated successfully',
                confirmButtonColor: '#3085d6'
            }).then(() => {
                closeModal();
                window.location.reload();
            });
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while updating the address',
            confirmButtonColor: '#3085d6'
        });
    });
});

// Utility Functions
function closeModal() {
    document.getElementById('editAddressModal').style.display = 'none';
}

function resetAddressForm() {
    document.getElementById('addAddressForm').reset();
    Swal.fire({
        icon: 'info',
        title: 'Form Reset',
        text: 'All fields have been cleared',
        confirmButtonColor: '#3085d6',
        timer: 1500,
        showConfirmButton: false
    });
}

// Delete Address Function
function deleteAddress(addressId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to revert this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/address/${addressId}`, {
                method: 'DELETE',
                credentials: 'same-origin'
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.error,
                        confirmButtonColor: '#3085d6'
                    });
                } else {
                    Swal.fire({
                        icon: 'success',
                        title: 'Deleted!',
                        text: 'Address has been deleted.',
                        confirmButtonColor: '#3085d6'
                    }).then(() => {
                        window.location.reload();
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while deleting the address',
                    confirmButtonColor: '#3085d6'
                });
            });
        }
    });
}



function setDefaultAddress(addressId) {
    fetch(`/address/default/${addressId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        credentials: 'same-origin'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Default address updated successfully',
                confirmButtonColor: '#3085d6'
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.error);
        }
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Error updating default address',
            confirmButtonColor: '#3085d6'
        });
    });
}
</script>



