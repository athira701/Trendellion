<%-include('../../views/partials/user/header')%>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Watch Product Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            background-color: #f7f7f7;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .product-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-top: 40px;
        }

        .image-gallery {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .main-image {
            width: 100%;
            height: 500px;
            object-fit: contain;
            border: 1px solid #eee;
            border-radius: 10px;
            margin-bottom: 20px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .thumbnail-container {
            display: flex;
            justify-content: center;
            gap: 10px;
        }

        .thumbnail {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border: 1px solid #eee;
            border-radius: 5px;
            cursor: pointer;
            transition: border-color 0.3s;
        }

        .thumbnail:hover {
            border-color: #ff4444;
        }

        .product-info {
            padding: 30px;
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .product-title {
            font-size: 32px;
            margin-bottom: 15px;
            font-weight: bold;
        }

        .price {
            font-size: 28px;
            color: #ff4444;
            margin-bottom: 20px;
        }

        .rating {
            color: #ffd700;
            margin-bottom: 20px;
        }

        .size-selector {
            margin: 20px 0;
        }

        .size-btn {
            padding: 10px 18px;
            margin-right: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
            background: none;
            font-size: 16px;
        }

        .size-btn.active {
            background: #333;
            color: white;
        }

        .color-selector {
            display: flex;
            gap: 15px;
            margin: 20px 0;
        }

        .color-option {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .color-option.active {
            border-color: #333;
        }

        .quantity-selector {
            display: flex;
            align-items: center;
            gap: 20px;
            margin: 20px 0;
        }

        .quantity-btn {
            padding: 8px 18px;
            font-size: 20px;
            border: 1px solid #ddd;
            background: none;
            cursor: pointer;
        }

        .buy-now {
            padding: 18px 40px;
            background: #ff4444;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            display: block;
            width: 100%;
            margin-top: 20px;
        }

        .delivery-info {
            margin-top: 30px;
            padding: 25px;
            background: #fff;
            border: 1px solid #eee;
            border-radius: 10px;
        }

        h3 {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        p {
            font-size: 16px;
            margin-bottom: 15px;
            color: #555;
        }
        footer {
            background-color: #1C1C1C;
            color: white;
            padding: 40px 16px;
        }

        footer .grid {
            display: grid;
            grid-template-columns: repeat(5, 1fr);
            gap: 40px;
        }

        footer h3 {
            font-weight: 500;
            color: #f8f8f8;
        }

        footer p {
            color: #b0b0b0;
            font-size: 14px;
        }

        footer .social-icons i {
            color: #b0b0b0;
            font-size: 20px;
            margin-right: 16px;
            transition: color 0.3s;
        }

        footer .social-icons i:hover {
            color: #DB4444;
        }


         .image-gallery {
            position: relative;
        }

        .main-image-container {
            position: relative;
            overflow: hidden;
            cursor: zoom-in;
        }

        .main-image {
            transition: transform 0.3s ease;
            width: 100%;
            height: 500px;
            object-fit: contain;
        }

        .zoom-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-repeat: no-repeat;
            background-size: 200%;
            background-position: center;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 10;
        }

        .thumbnail {
            opacity: 0.6;
            transition: opacity 0.3s ease;
        }

        .thumbnail.active, .thumbnail:hover {
            opacity: 1;
            border: 2px solid #ff4444;
        }
    </style>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        }

        /* Header/Navigation */
        .header {
            padding: 20px 60px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid #f5f5f5;
            background: white;
        }

        .brand {
            font-size: 24px;
            font-weight: bold;
            color: #000;
            text-decoration: none;
            flex-shrink: 0;
        }

        .nav-links {
            display: flex;
            gap: 32px;
            margin-left: 60px;
        }

        .nav-links a {
            text-decoration: none;
            color: #000;
            font-size: 16px;
        }

        .search-container {
            display: flex;
            align-items: center;
            background: #f5f5f5;
            border-radius: 4px;
            padding: 8px 16px;
            margin: 0 32px;
            flex-grow: 1;
            max-width: 400px;
        }

        .search-input {
            border: none;
            background: transparent;
            width: 100%;
            padding: 4px;
            font-size: 14px;
        }

        .search-input:focus {
            outline: none;
        }

        .search-icon {
            color: #666;
            cursor: pointer;
        }

        .right-section {
            display: flex;
            align-items: center;
            gap: 24px;
        }

        .icon-button {
            background: none;
            border: none;
            cursor: pointer;
            position: relative;
            color: #000;
        }

        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #DB4444;
            color: white;
            font-size: 12px;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .logout-button {
            background: #DB4444;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        .quantity-controls {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px; /* Space between buttons and input */
  width: 150px; /* Set a width for the container */
}

.quantity-controls button {
  width: 35px;
  height: 35px;
  font-size: 20px;
  border: 1px solid #ccc;
  background-color: #f5f5f5;
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  transition: background-color 0.3s ease;
}

.quantity-controls button:hover {
  background-color: #e0e0e0;
}

.quantity-controls input {
  width: 50px;
  height: 35px;
  text-align: center;
  font-size: 16px;
  border: 1px solid #ccc;
  padding: 5px;
  margin: 0;
  box-sizing: border-box;
}

.quantity-controls input:focus {
  outline: none;
  border-color: #007bff;
}

.quantity-controls button:active {
  background-color: #ddd;
}

    </style>
</head>

<body>
    <div class="container">
        <div class="product-grid">
            <div class="image-gallery">
                <div class="main-image-container">
                    <img src="/uploads/<%= product.productImage[0] %>" alt="Smart Watch" class="main-image" id="mainImage">
                    <div class="zoom-overlay" id="zoomOverlay"></div>
                </div>
                <div class="thumbnail-container">
                    <img src="/uploads/<%= product.productImage[1] %>" alt="Watch Side View" class="thumbnail active" data-full="/uploads/<%= product.productImage[1] %>">
                    <img src="/uploads/<%= product.productImage[2] %>" alt="Watch Front View" class="thumbnail" data-full="/uploads/<%= product.productImage[2] %>">
                    <img src="/uploads/<%= product.productImage[3] %>" alt="Watch Back View" class="thumbnail" data-full="/uploads/<%= product.productImage[3] %>">
                </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-lg p-6">
                <div class="flex justify-between items-start">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-800 mb-2"><%= product.productName %></h1>
                        <div class="flex items-center mb-4">
                            <div class="text-yellow-400 mr-2">
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star"></i>
                                <i class="fas fa-star-half-alt"></i>
                            </div>
                            <span class="text-gray-600">(150 Reviews)</span>
                        </div>
                    </div>
                    <button class="wishlist-btn text-gray-500 hover:text-red-500">
                        <i class="far fa-heart text-2xl"></i>
                    </button>
                </div>

                <div class="text-3xl font-bold text-red-500 mb-4">
                    ₹<%= product.salePrice %>
                </div>

                <div class="mb-4">
                    <h3 class="font-semibold mb-2">Color</h3>
                    <div class="flex space-x-3">
                        <div class="w-8 h-8 rounded-full bg-gray-800 cursor-pointer color-option active"></div>
                        <div class="w-8 h-8 rounded-full bg-red-500 cursor-pointer color-option"></div>
                    </div>
                </div>

                <div class="mb-4">
                    <h3 class="font-semibold mb-2">Quantity</h3>
                    <div class="quantity-controls">
                        <button class="decrement" data-product-id="<%= product._id %>">-</button>
                        <input 
  type="number" 
  value="1" 
  min="1" 
  data-product-id="<%= product._id %>" 
  product-stock="<%= product.quantity %>" 
  class="update-quantity">

                        <button class="increment" data-product-id="<%= product._id %>">+</button>
                      </div>
                      
                      
                      
                      
                      
                </div>
               
                    <div class="mb-4">
                        <p class="text-gray-700 font-medium">
                            Total Quantity: <span class="quantity font-bold" product-stock="<%= product.quantity %>"><%= product.quantity %></span>
                        </p>
                        <p class="text-gray-700 font-medium">
                            Status: 
                            <span class="status font-bold 
                                <%= product.status.toLowerCase() === 'in stock' ? 'text-green-600' : 'text-red-600' %>">
                                <%= product.status %>
                            </span>
                        </p>
                    </div>
      
                
                
                
                <!-- Hidden Input Field to Submit Quantity -->
                <form id="addToCartForm">
                    <input type="hidden" name="quantity" id="quantity-input" value="1">
                    <button 
                    type="button"
                    id="addToCartButton"
                    class="w-full border border-red-500 text-red-500 py-3 rounded-md hover:bg-red-500 hover:text-white transition duration-300">
                    Add To Cart
                  </button>
                </form>
                
                

                <div class="space-y-4">
                    <form action="/addToCart/<%= product._id %>" method="POST">
                        
                    </form>
          

                    <button class="w-full border border-red-500 text-red-500 py-3 rounded-md hover:bg-red-500 hover:text-white transition duration-300">
                        Buy Now
                    </button>
                </div>

                <div class="mt-6 bg-gray-100 p-4 rounded-md">
                    <div class="flex items-center mb-2">
                        <i class="fas fa-truck mr-2 text-gray-600"></i>
                        <span class="font-semibold">Free Delivery</span>
                    </div>
                    <p class="text-sm text-gray-600">Enter your postal code for delivery availability</p>
                    
                    <div class="flex items-center mt-4">
                        <i class="fas fa-undo mr-2 text-gray-600"></i>
                        <span class="font-semibold">30-Day Return</span>
                    </div>
                    <p class="text-sm text-gray-600">Hassle-free returns within 30 days</p>
                </div>
            </div>
        </div>


        <div class="mt-12">
            <h2 class="text-2xl font-bold mb-6 text-center">Similar Products</h2>
            <div class="grid md:grid-cols-4 gap-6">
                <% let count = 0; %>
                <% relatedProducts.forEach(product => { %>
                    <% if (count < 4) { %>
                    <div class="bg-white rounded-lg shadow-md overflow-hidden transform transition hover:scale-105">
                        <img src="/uploads/<%= product.productImage[0] %>" 
                             alt="<%= product.productName %>" 
                             class="w-full h-48 object-cover">
                        <div class="p-4">
                            <h3 class="font-semibold text-lg mb-2"><%= product.productName %></h3>
                            <div class="flex justify-between items-center">
                                <span class="text-red-500 font-bold">₹<%= product.salePrice %></span>
                                <button class="text-gray-500 hover:text-red-500">
                                    <i class="fas fa-shopping-cart"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <% count++; %>
                    <% } %>
                <% }) %>
            </div>
        </div>
    </div>

    <%-include('../../views/partials/user/footer')%>
    <script>
        // Basic functionality for image gallery
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.addEventListener('click', function() {
                document.querySelector('.main-image').src = this.src;
            });
        });

        // Size selector functionality
        document.querySelectorAll('.size-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                document.querySelectorAll('.size-btn').forEach(b => b.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Color selector functionality
        document.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Quantity selector functionality
        const quantitySpan = document.querySelector('.quantity-selector span');
        document.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                let quantity = parseInt(quantitySpan.textContent);
                if (this.textContent === '+' && quantity < 99) {
                    quantitySpan.textContent = quantity + 1;
                } else if (this.textContent === '-' && quantity > 1) {
                    quantitySpan.textContent = quantity - 1;
                }
            });
        });



        document.addEventListener('DOMContentLoaded', function() {
            const mainImage = document.getElementById('mainImage');
            const zoomOverlay = document.getElementById('zoomOverlay');
            const thumbnails = document.querySelectorAll('.thumbnail');

            // Thumbnail selection
            thumbnails.forEach(thumb => {
                thumb.addEventListener('click', function() {
                    // Remove active class from all thumbnails
                    thumbnails.forEach(t => {
                        t.classList.remove('active');
                    });

                    // Add active class to clicked thumbnail
                    this.classList.add('active');

                    // Change main image
                    mainImage.src = this.getAttribute('data-full');
                });
            });

            // Image zoom functionality
            mainImage.addEventListener('mousemove', function(e) {
                const rect = this.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;

                zoomOverlay.style.backgroundImage = `url(${this.src})`;
                zoomOverlay.style.backgroundPosition = `${(x/rect.width * 100)}% ${(y/rect.height * 100)}%`;
                zoomOverlay.style.opacity = '1';
            });

            mainImage.addEventListener('mouseleave', function() {
                zoomOverlay.style.opacity = '0';
            });
        });

        document.querySelectorAll('.thumbnail-image').forEach(thumbnail => {
            thumbnail.addEventListener('click', function() {
                // Remove opacity from all thumbnails
                document.querySelectorAll('.thumbnail-image').forEach(t => {
                    t.classList.remove('opacity-100');
                    t.classList.add('opacity-60');
                });

                // Add opacity to selected thumbnail
                this.classList.remove('opacity-60');
                this.classList.add('opacity-100');

                // Update main image
                document.getElementById('mainProductImage').src = this.src;
            });
        });

        // Color Selection
        document.querySelectorAll('.color-option').forEach(option => {
            option.addEventListener('click', function() {
                document.querySelectorAll('.color-option').forEach(o => o.classList.remove('active'));
                this.classList.add('active');
            });
        });

        // Quantity Selector
      // Attach event listeners to all increment buttons
      document.querySelectorAll('.increment').forEach(button => {
  button.addEventListener('click', async (e) => {
    const productId = e.target.getAttribute('data-product-id');
    const input = document.querySelector(`input[data-product-id="${productId}"]`);
    let currentQuantity = parseInt(input.value, 10);
    const maxStock = parseInt(input.getAttribute('product-stock'), 10); // Total product stock

    // Fetch current cart quantity for the product
    let currentCartQuantity = 0;
    try {
      const response = await fetch(`/getCartStock/${productId}`);
      const data = await response.json();
      if (data.success) {
        currentCartQuantity = data.cartQuantity || 0; // Current cart quantity
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: data.message || 'Failed to fetch cart stock.',
        });
        return;
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'An unexpected error occurred while fetching cart stock.',
      });
      return;
    }

    // Calculate the maximum quantity that can be added
    const maxAddableQuantity = maxStock - currentCartQuantity;

    // Ensure valid current quantity
    if (isNaN(currentQuantity) || currentQuantity < 1) {
      currentQuantity = 1;
    }

    // Calculate the new quantity
    const newQuantity = Math.min(currentQuantity + 1, maxAddableQuantity);

    if (newQuantity === currentQuantity) {
      Swal.fire({
        icon: 'warning',
        title: 'Stock Limit Reached',
        text: `Only ${maxAddableQuantity} item(s) can be added to the cart.`,
      });
      return;
    }

    // Update the input field immediately
    input.value = newQuantity;

    // Sync with the server
    fetch(`/updateCartQuantityy/${productId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity: newQuantity }),
    })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: data.message,
          });
          input.value = currentQuantity; // Revert to previous value
        }
      })
      .catch(error => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'An unexpected error occurred.',
        });
        input.value = currentQuantity; // Revert to previous value
      });
  });
});


document.querySelectorAll('.decrement').forEach(button => {
  button.addEventListener('click', (e) => {
    const productId = e.target.getAttribute('data-product-id');
    const input = document.querySelector(`input[data-product-id="${productId}"]`);
    let currentQuantity = parseInt(input.value, 10);

    if (isNaN(currentQuantity) || currentQuantity <= 1) {
      Swal.fire({
        icon: 'warning',
        title: 'Minimum Quantity Reached',
        text: 'Quantity cannot be less than 1.',
      });
      return;
    }

    const newQuantity = currentQuantity - 1;

    input.value = newQuantity;

    // Sync with the server
    fetch(`/updateCartQuantityy/${productId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ quantity: newQuantity }),
    })
      .then(response => response.json())
      .then(data => {
        if (!data.success) {
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: data.message,
          });
          input.value = currentQuantity; // Revert to previous value
        }
      })
      .catch(error => {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'An unexpected error occurred.',
        });
        input.value = currentQuantity; // Revert to previous value
      });
  });
});





        // Wishlist Button Toggle
        document.querySelector('.wishlist-btn').addEventListener('click', function() {
            this.querySelector('i').classList.toggle('far');
            this.querySelector('i').classList.toggle('fas');
        });



        document.getElementById('addToCartButton').addEventListener('click', async function () {
        const quantityInput = document.querySelector('.update-quantity');
        const productId = quantityInput.getAttribute('data-product-id');
        const quantity = quantityInput.value;

        try {
            const response = await fetch(`/addToCart/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ quantity }),
            });

            if (response.ok) {
                const result = await response.json();

                // SweetAlert for success
                Swal.fire({
                    title: 'Success!',
                    text: result.message || 'Product added to cart successfully!',
                    icon: 'success',
                    confirmButtonText: 'OK',
                    timer: 2000,
                });

                // Optionally update the UI, e.g., cart count or product stock
            } else {
                const error = await response.json();

                // SweetAlert for error
                Swal.fire({
                    title: 'Error!',
                    text: `Failed to add product to cart: ${error.message}`,
                    icon: 'error',
                    confirmButtonText: 'Try Again',
                });
            }
        } catch (error) {
            console.error('Error adding product to cart:', error);

            // SweetAlert for unexpected error
            Swal.fire({
                title: 'Oops!',
                text: 'An unexpected error occurred. Please try again later.',
                icon: 'error',
                confirmButtonText: 'OK',
            });
        }
    });

    </script>
</body>
</html>